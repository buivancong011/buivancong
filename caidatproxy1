#!/usr/bin/env bash
set -Eeuo pipefail

# ========= USER CONFIG =========
# List SOCKS5 (port 1339) dạng ip:port:user:pass — mỗi dòng 1 proxy.
PROXY_LIST="$(cat <<'EOF'
156.239.204.25:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.201.49:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.202.151:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.201.0:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.196.11:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.203.251:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.205.107:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.198.52:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.195.73:1339:cao_nAEfN2:g2Bawi4kkDZyztX
156.239.197.103:1339:cao_nAEfN2:g2Bawi4kkDZyztX
EOF
)"

# MTU của TUN (giảm 1400 nếu hay timeouts)
TUN_MTU=1500

# ========= IMAGES =========
IMG_SBOX="ghcr.io/sagernet/sing-box:latest"

# ========= PRECHECK =========
command -v docker >/dev/null 2>&1 || { echo "[ERR] Cần Docker."; exit 1; }
if [[ ! -e /dev/net/tun ]]; then
  echo "[INFO] Tạo /dev/net/tun..."
  sudo mkdir -p /dev/net || true
  sudo mknod /dev/net/tun c 10 200 || true
  sudo chmod 666 /dev/net/tun || true
fi

usage() {
  cat <<USAGE
Usage:
  $0 up         # khởi chạy tất cả sboxN (DNS đi qua proxy)
  $0 status     # đo latency HTTPS (1.1.1.1) qua từng sboxN
  $0 down       # xoá toàn bộ sboxN
Gắn app vào route N:   docker run ... --network=container:sboxN <image> ...
App CLI (DNS tại proxy): curl --socks5-hostname USER:PASS@IP:PORT https://...
USAGE
}

mk_sbox_config() {
  # $1=idx  $2=ip  $3=port  $4=user  $5=pass
  local idx="$1" ip="$2" port="$3" user="$4" pass="$5"
  local cfg="sbox_${idx}.json"
  cat > "$cfg" <<JSON
{
  "log": { "level": "info" },

  "dns": {
    "servers": [
      {
        "tag": "dns-remote",
        "address": "tls://1.1.1.1",
        "address_resolver": "local",
        "strategy": "prefer_ipv4",
        "detour": "socks-out"
      },
      { "tag": "local", "address": "local" }
    ],
    "rules": [
      { "outbound": ["any"], "server": "dns-remote" }
    ],
    "final": "dns-remote"
  },

  "inbounds": [
    {
      "type": "tun",
      "tag": "tun-in",
      "inet4_address": "172.19.${idx}.1/30",
      "mtu": ${TUN_MTU},
      "stack": "system",
      "sniff": true,
      "auto_route": true,
      "strict_route": true
    }
  ],

  "outbounds": [
    {
      "type": "socks",
      "tag": "socks-out",
      "server": "${ip}",
      "server_port": ${port},
      "version": "5",
      "username": "${user}",
      "password": "${pass}"
    },
    { "type": "direct", "tag": "direct" },
    { "type": "block", "tag": "block" }
  ],

  "route": {
    "auto_detect_interface": true,
    "final": "socks-out"
  }
}
JSON
}

start_sbox() {
  local idx="$1" ip="$2" port="$3" user="$4" pass="$5"
  local name="sbox${idx}"
  docker rm -f "$name" >/dev/null 2>&1 || true
  mk_sbox_config "$idx" "$ip" "$port" "$user" "$pass"
  docker run -d --name "$name" --restart=always \
    --cap-add=NET_ADMIN --device /dev/net/tun \
    -v "$PWD/sbox_${idx}.json:/etc/sing-box/config.json:ro" \
    "$IMG_SBOX" run -c /etc/sing-box/config.json >/dev/null
}

check_latency_ip() {
  local idx="$1"
  docker run --rm --network=container:sbox${idx} curlimages/curl \
    -s -o /dev/null -w 'connect=%{time_connect}s ttfb=%{time_starttransfer}s total=%{time_total}s\n' \
    https://1.1.1.1 || true
}

cmd_up() {
  local i=0
  while IFS=: read -r ip port user pass; do
    [[ -z "${ip:-}" || "${ip:0:1}" == "#" ]] && continue
    i=$((i+1))
    echo "------------------------------------------------------------"
    echo "[ROUTE $i] SOCKS5: ${user}:${pass}@${ip}:${port}"
    start_sbox "$i" "$ip" "$port" "$user" "$pass"
    sleep 0.5
    echo -n "[ROUTE $i] latency(IP): "
    check_latency_ip "$i"
  done <<< "$PROXY_LIST"
  echo
  echo "✅ ĐÃ KHỞI TẠO $(docker ps --format '{{.Names}}' | grep -c '^sbox' || true) ROUTES (sing-box, DNS qua proxy)."
  echo "👉 Gắn app:  docker run ... --network=container:sboxN <image> ..."
  echo "👉 App CLI SOCKS5H:  curl --socks5-hostname USER:PASS@IP:PORT https://..."
}

cmd_status() {
  for n in $(docker ps --format '{{.Names}}' | awk '/^sbox/{gsub("sbox","");print}'); do
    printf "sbox%-3s " "$n"
    check_latency_ip "$n"
  done
}

cmd_down() {
  echo "[CLEANUP] Xoá sboxN..."
  for n in $(docker ps -a --format '{{.Names}}' | awk '/^sbox/{gsub("sbox","");print}'); do
    docker rm -f "sbox${n}" >/dev/null 2>&1 || true
    rm -f "sbox_${n}.json" || true
  done
  echo "✅ DONE."
}

case "${1:-}" in
  up)     cmd_up ;;
  status) cmd_status ;;
  down)   cmd_down ;;
  *)      usage; exit 1 ;;
esac
