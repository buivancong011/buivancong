#!/bin/bash
set -Eeuo pipefail

# ===================== CONFIG =====================
# Danh sách HTTP proxy dạng "ip:port:user:pass"
PROXIES=(
"s11.pxus.live:27474:user27474:1758906804"
"103.82.25.199:20538:user20538:1758177032"
"s13.pxus.live:55448:user55448:1759308326"
"s3.pxus.live:24640:user24640:1758163571"
"103.82.27.148:50907:user50907:1758123031"
"s13.pxus.live:21772:user21772:1759114887"
"103.82.26.78:38506:user38506:1758123016"
"s15.pxus.live:14937:user14937:1758177032"
"103.82.25.199:37318:user37318:1758265252"
"103.82.27.99:56076:user56076:1758740726"
"103.82.27.99:10206:user10206:1757935434"
"103.82.26.78:23231:user23231:1758163586"
"103.82.27.99:19027:user19027:1758072607"
"103.82.27.99:19362:user19362:1757589629"
"s13.pxus.live:33846:user33846:1759040239"
"103.82.27.99:17626:user17626:1757589614"
"103.82.27.99:13751:user13751:1757735104"
"103.82.27.99:12454:user12454:1757545219"
"s15.pxus.live:23315:user23315:1758177017"
"s15.pxus.live:27592:user27592:1758260705"
"103.82.27.99:22523:user22523:1758072607"
"103.82.27.148:18595:user18595:1757898998"
"s13.pxus.live:13053:user13053:1759408219"
"103.82.25.199:23645:user23645:1758177032"
"103.82.27.99:22340:user22340:1757689237"
"103.82.27.99:21035:user21035:1757689237"
"s2.pxus.live:54491:user54491:1758123031"
"103.82.27.99:17430:user17430:1757689237"
"103.82.25.199:29246:user29246:1758177032"
"103.82.26.78:38507:user38507:1757303440"
"s13.pxus.live:38953:user38953:1758518106"
"s13.pxus.live:30302:user30302:1759040194"
"s13.pxus.live:28690:user28690:1758955655"
"103.82.25.199:11987:user11987:1758247210"
"103.82.25.199:26235:user26235:1758189488"
"s13.pxus.live:10048:user10048:1758955640"
"103.82.27.99:25246:user25246:1757735104"
"103.82.27.99:15594:user15594:1757545249"
"s15.pxus.live:27530:user27530:1758247210"
"103.82.27.99:13047:user13047:1757735104"
"s3.pxus.live:41783:user41783:1758433506"
"103.82.25.188:19280:user19280:1758907059"
"103.82.27.148:12618:user12618:1757863866"
"s13.pxus.live:12293:user12293:1758259144"
"s13.pxus.live:52671:user52671:1759227327"
"103.82.25.199:36444:user36444:1758179749"
"s13.pxus.live:41379:user41379:1759308326"
"103.82.26.78:12651:user12651:1758163616"
"103.82.27.99:24450:user24450:1758072607"
"s13.pxus.live:44368:user44368:1759114857"
"s3.pxus.live:49032:user49032:1758360642"
"103.82.27.99:17260:user17260:1758068104"
"s11.pxus.live:19661:user19661:1758907029"
"103.82.27.99:20858:user20858:1757735104"
"103.82.27.99:19045:user19045:1758072607"

# ... có thể dán thêm toàn bộ list của bạn ở đây ...
)

# Ảnh container
IMG_SBOX="ghcr.io/sagernet/sing-box:latest"

# Tên base cho container theo tuyến
SBOX_BASE="csbox"

# Tối ưu TUN
MTU="1400"
ENABLE_BBR=true
ENABLE_TFO=true

# DNS mặc định cho container sbox (không DoH, không qua HTTP proxy)
# Lưu ý: app chạy --network=container:sboxN sẽ dùng DNS này.
RESOLV_CONTENT=$'nameserver 8.8.8.8\nnameserver 1.1.1.1\noptions ndots:0'

# ===================== PRECHECK =====================
command -v docker >/dev/null 2>&1 || { echo "[ERR] Cần Docker."; exit 1; }
if [[ ! -e /dev/net/tun ]]; then
  echo "[INFO] Tạo /dev/net/tun..."
  sudo mkdir -p /dev/net || true
  sudo mknod /dev/net/tun c 10 200 || true
  sudo chmod 666 /dev/net/tun || true
fi

# ===================== FUNCS =====================
mk_sbox_config() {
  # $1: file, $2: ip, $3: port, $4: user, $5: pass
  local cfg="$1" ip="$2" port="$3" user="$4" pass="$5"
  cat > "$cfg" <<JSON
{
  "log": { "level": "warn" },

  "dns": {
    "servers": [
      { "tag": "dns1", "address": "udp://8.8.8.8", "strategy": "ipv4_only" },
      { "tag": "dns2", "address": "udp://1.1.1.1", "strategy": "ipv4_only" }
    ],
    "strategy": "ipv4_only"
  },

  "inbounds": [
    {
      "type": "tun",
      "interface_name": "tun0",
      "address": ["172.19.0.1/30"],
      "auto_route": true,
      "strict_route": false,
      "sniff": true,
      "mtu": ${MTU}
    }
  ],

  "outbounds": [
    {
      "tag": "proxy",
      "type": "http",
      "server": "${ip}",
      "server_port": ${port},
      "username": "${user}",
      "password": "${pass}"
    },
    { "tag": "direct", "type": "direct" },
    { "tag": "block",  "type": "block" }
  ],

  "route": {
    "default_domain_resolver": "dns1",
    "auto_detect_interface": true,
    "rules": [
      { "port": 53, "outbound": "direct" }
    ],
    "final": "proxy"
  }
}
JSON
}

sysctl_optimize() {
  if [[ "${ENABLE_BBR}" == true ]]; then
    sudo sysctl -w net.core.default_qdisc=fq >/dev/null 2>&1 || true
    sudo sysctl -w net.ipv4.tcp_congestion_control=bbr >/dev/null 2>&1 || true
  fi
  if [[ "${ENABLE_TFO}" == true ]]; then
    sudo sysctl -w net.ipv4.tcp_fastopen=3 >/dev/null 2>&1 || true
  fi
}

cleanup_one() {
  local idx="$1"
  local s="${SBOX_BASE}${idx}"
  docker rm -f "$s" >/dev/null 2>&1 || true
  rm -f "sbox_${idx}.json" "resolv_${idx}.conf" >/dev/null 2>&1 || true
}

wait_running() {
  # $1: container name, $2: timeout seconds
  local name="$1" timeout="${2:-20}"
  local t=0 st
  while true; do
    st="$(docker inspect -f '{{.State.Status}}' "$name" 2>/dev/null || true)"
    case "$st" in
      running) return 0 ;;
      restarting|created|starting)
        if (( t >= timeout )); then
          echo "[WARN] $name chưa running sau ${timeout}s (status=$st)."
          return 1
        fi
        sleep 1; ((t++))
        ;;
      exited|dead|'')
        echo "[ERR] $name status=$st. Logs:"
        docker logs --since=2m "$name" || true
        return 1
        ;;
      *)
        sleep 1
        ;;
    esac
  done
}

check_config() {
  # $1: path to config.json
  local cfg="$1"
  docker run --rm \
    --cap-add=NET_ADMIN --device /dev/net/tun \
    -v "$PWD/$cfg":/etc/sing-box/config.json:ro \
    ghcr.io/sagernet/sing-box:latest check -c /etc/sing-box/config.json
}

start_one() {
  local idx="$1"
  IFS=':' read -r ip port user pass <<<"$2"
  local s="${SBOX_BASE}${idx}"
  local cfg="sbox_${idx}.json"
  local rsv="resolv_${idx}.conf"

  echo "------------------------------------------------------------"
  echo "[ROUTE $idx] HTTP: ${user}:${pass}@${ip}:${port}"

  cleanup_one "$idx"
  mk_sbox_config "$cfg" "$ip" "$port" "$user" "$pass"
  printf "%s\n" "$RESOLV_CONTENT" > "$rsv"

  # Validate config trước khi chạy
  if ! check_config "$cfg"; then
    echo "[ERR] Config route $idx không hợp lệ. Bỏ qua route này."
    return 0
  fi

  docker run -d --name "$s" --restart=always \
    --cap-add=NET_ADMIN --device /dev/net/tun \
    -v "$PWD/$cfg":/etc/sing-box/config.json:ro \
    -v "$PWD/$rsv":/etc/resolv.conf:ro \
    "$IMG_SBOX" run -c /etc/sing-box/config.json >/dev/null

  # Đợi sboxN chạy ổn định
  if ! wait_running "$s" 25; then
    echo "[ERR] $s không vào trạng thái running. Kiểm tra log ở trên."
    return 0
  fi

  # Kiểm tra nhanh: test IP (không phụ thuộc DNS)
  printf "[ROUTE %d] latency(IP): " "$idx"
  docker run --rm --network=container:"$s" curlimages/curl:latest \
    -s -o /dev/null -w 'connect=%{time_connect}s ttfb=%{time_starttransfer}s total=%{time_total}s\n' \
    https://1.1.1.1 || echo "FAIL"

  # Kiểm tra qua domain (DNS DIRECT, TCP qua HTTP proxy)
  printf "[ROUTE %d] latency(DNS+TLS): " "$idx"
  docker run --rm --network=container:"$s" curlimages/curl:latest \
    -s -o /dev/null -w 'connect=%{time_connect}s ttfb=%{time_starttransfer}s total=%{time_total}s\n' \
    https://www.cloudflare.com/cdn-cgi/trace || echo "FAIL"

  echo "[ROUTE $idx] RUNNING: $s"
  echo "→ Gắn app: docker run ... --network=container:${s} <image> ..."
}

status_all() {
  local i=1
  for _ in "${PROXIES[@]}"; do
    local s="${SBOX_BASE}${i}"
    if docker ps --format '{{.Names}}' | grep -qx "$s"; then
      printf "[route%02d] " "$i"
      docker run --rm --network=container:"$s" curlimages/curl:latest \
        -s -o /dev/null -w 'IP: connect=%{time_connect}s total=%{time_total}s  |  ' \
        https://1.1.1.1
      docker run --rm --network=container:"$s" curlimages/curl:latest \
        -s -o /dev/null -w 'DNS+TLS: connect=%{time_connect}s total=%{time_total}s\n' \
        https://www.cloudflare.com/cdn-cgi/trace
    else
      echo "[route$(printf %02d "$i")] stopped"
    fi
    ((i++))
  done
}

down_all() {
  echo "[CLEANUP] stopping all routes..."
  local i=1
  for _ in "${PROXIES[@]}"; do
    cleanup_one "$i"
    ((i++))
  done
  echo "[DONE]"
}

pull_images() {
  docker pull "$IMG_SBOX" >/dev/null
}

# ===================== CLI =====================
case "${1:-up}" in
  up)
    sysctl_optimize
    pull_images
    i=1
    for spec in "${PROXIES[@]}"; do
      start_one "$i" "$spec"
      ((i++))
    done
    echo
    echo "✅ ĐÃ KHỞI TẠO ${#PROXIES[@]} ROUTES (mỗi route: sing-box TUN; DNS 53 bypass DIRECT; outbound HTTP CONNECT)."
    echo "ℹ️  Host KHÔNG đổi route; chỉ container gắn --network=container:csboxN mới đi qua HTTP proxy tương ứng."
    ;;
  status)
    status_all
    ;;
  down)
    down_all
    ;;
  *)
    echo "Usage: $0 [up|status|down]"
    exit 1
    ;;
esac
