#!/bin/bash
set -Eeuo pipefail

# ===================== CONFIG =====================
UPSTREAMS=(
  "http://user34759:1757082934@103.82.25.9:34759"
  "http://user34742:1756888209@103.82.25.9:34742"
  "http://user30190:1756884651@103.82.25.9:30190"
  "http://user34191:1757060107@103.82.25.9:34191"
  "http://user34683:1756884801@103.82.25.9:34683"
  "http://user35502:1756884666@103.82.25.9:35502"
  "http://user29745:1756884621@103.82.25.9:29745"
  "http://user34884:1756884877@103.82.25.9:34884"
  "http://user28954:1756884666@103.82.25.9:28954"
  "http://user30145:1756884651@103.82.25.9:30145"
  "http://user36124:1756884681@103.82.25.9:36124"
  "http://user34966:1756884951@103.82.25.9:34966"
  "http://user35060:1756884877@103.82.25.9:35060"
  "http://user34773:1756884921@103.82.25.9:34773"
  "http://user34980:1757082979@103.82.25.9:34980"
  "http://user28831:1756884877@103.82.25.9:28831"
  "http://user34833:1756983612@103.82.25.9:34833"
  "http://user35213:1756884966@103.82.25.9:35213"
  "http://user34522:1757060107@103.82.25.9:34522"
  "http://user34602:1756884666@103.82.25.9:34602"
)

START_SOCKS=1080
GLIDER_NAME_BASE="glider"
TUN_NAME_BASE="tun"

IMG_GLIDER="nadoo/glider:latest"
IMG_TUN="xjasonlyu/tun2socks:v2.6.0"

TUN_LOGLEVEL="error"
DNS_CANDIDATES=("1.1.1.1" "8.8.8.8" "9.9.9.9" "1.0.0.1" "8.8.4.4")
NOFILE=131072
WATCH_INTERVAL=15

# ===================== PRECHECK =====================
command -v docker >/dev/null 2>&1 || { echo "[ERR] Cần Docker."; exit 1; }

if [[ ! -e /dev/net/tun ]]; then
  echo "[INFO] Tạo /dev/net/tun..."
  sudo mkdir -p /dev/net || true
  sudo mknod /dev/net/tun c 10 200 || true
  sudo chmod 600 /dev/net/tun || true
fi

get_bridge_ip() {
  local gw
  gw="$(docker network inspect bridge 2>/dev/null | awk -F'"' '/"Gateway":/ {print $4; exit}')"
  [[ -n "${gw:-}" ]] && echo "$gw" || echo "172.17.0.1"
}

avg_rtt_ms() {
  local ip="$1" count="${2:-3}" out
  if out=$(ping -q -n -c "$count" -W 1 -i 0.2 "$ip" 2>/dev/null | awk -F'/' '/^rtt|round-trip/ {print $5}'); then
    [[ -n "$out" ]] && echo "$out" || echo "9999"
  else
    echo "9999"
  fi
}

pick_fastest_dns() {
  local best_ip="" best_rtt=9999 r
  for ip in "${DNS_CANDIDATES[@]}"; do
    r="$(avg_rtt_ms "$ip" 3)"
    awk 'BEGIN{exit !(ARGC==3 && ARGV[1]+0<ARGV[2]+0)}' "$r" "$best_rtt" && { best_rtt="$r"; best_ip="$ip"; }
  done
  [[ -n "$best_ip" ]] && echo "$best_ip" || echo "1.1.1.1"
}

detect_mtu() {
  local host="8.8.8.8" lo=1200 hi=1472 mid ok=1200
  while (( lo <= hi )); do
    mid=$(( (lo+hi)/2 ))
    if ping -M do -s "$mid" -c 1 -W 1 "$host" >/dev/null 2>&1; then
      ok="$mid"; lo=$(( mid+1 ))
    else
      hi=$(( mid-1 ))
    fi
  done
  local mtu=$(( ok + 28 - 8 ))
  (( mtu < 1280 )) && mtu=1280
  echo "$mtu"
}

# ===================== FUNCTIONS =====================
cleanup_route() {
  local idx="$1"
  docker rm -f "${GLIDER_NAME_BASE}${idx}" "${TUN_NAME_BASE}${idx}" >/dev/null 2>&1 || true
  rm -f "resolv_${idx}.conf" >/dev/null 2>&1 || true
}

start_route() {
  local idx="$1" upstream="$2"
  local socks_port=$((START_SOCKS + idx - 1))
  local g="${GLIDER_NAME_BASE}${idx}"
  local t="${TUN_NAME_BASE}${idx}"
  local resolv_file="resolv_${idx}.conf"
  local bridge_ip; bridge_ip="$(get_bridge_ip)"

  echo "------------------------------------------------------------"
  echo "[ROUTE $idx] Upstream: $upstream"
  echo "[ROUTE $idx] SOCKS5 on host: ${socks_port} (bridge ${bridge_ip})"

  cleanup_route "$idx"

  # 1) DNS per-route (fastest + backup) với timeout/rotate
  local fast_dns; fast_dns="$(pick_fastest_dns)"
  {
    echo "options ndots:0"
    echo "options timeout:1 attempts:2 rotate"
    echo "nameserver ${fast_dns}"
    echo "nameserver 8.8.4.4"
  } > "$resolv_file"
  echo "[ROUTE $idx] DNS: ${fast_dns}, 8.8.4.4"

  # 2) MTU detect
  local mtu; mtu="$(detect_mtu)"
  echo "[ROUTE $idx] MTU: ${mtu}"

  # 3) Glider
  docker run -d --name "$g" --restart=always --network host \
    --ulimit nofile="$NOFILE":"$NOFILE" \
    "$IMG_GLIDER" \
    -listen "socks5://0.0.0.0:${socks_port}" \
    -forward "$upstream" \
    -check "http://connectivitycheck.gstatic.com/generate_204#expect=204" \
    -checkinterval 10 || { echo "[ERR] glider $g fail"; return 1; }

  # 4) tun2socks (mount gai.conf để ưu tiên IPv4)
  docker run -d --name "$t" --restart=always \
    --cap-add=NET_ADMIN \
    -v /dev/net/tun:/dev/net/tun \
    -v "$PWD/$resolv_file":/etc/resolv.conf:ro \
    -v "$PWD/gai.conf":/etc/gai.conf:ro \
    --ulimit nofile="$NOFILE":"$NOFILE" \
    -e PROXY="socks5://${bridge_ip}:${socks_port}" \
    -e LOGLEVEL="$TUN_LOGLEVEL" \
    -e EXTRA_COMMANDS="ip rule add iif lo ipproto udp dport 53 lookup main 2>/dev/null || true; \
                       ip rule add ipproto udp dport 53 lookup main 2>/dev/null || true; \
                       ip link set dev tun0 mtu ${mtu} 2>/dev/null || true" \
    "$IMG_TUN" || { echo "[ERR] tun2socks $t fail"; docker logs "$g" || true; return 1; }

  # 5) Hậu xử lý đảm bảo MTU đã áp (retry ngắn)
  for _ in $(seq 1 10); do
    docker exec "$t" sh -c "ip link set dev tun0 mtu ${mtu}" && break || sleep 0.5
  done
  docker exec "$t" sh -c "ip link show tun0 | sed -n '1p'" >/dev/null || true

  # 6) In egress IP (best-effort)
  echo -n "[ROUTE $idx] Egress IP: "
  docker run --rm --network=container:"$t" curlimages/curl:latest -4 -s --max-time 6 https://api.ipify.org || true
  echo
  echo "[ROUTE $idx] READY → gắn app:  docker run ... --network=container:${t} <image> ..."
}

down_all() {
  echo "[CLEANUP] Xoá toàn bộ tuyến..."
  local i=1
  for _ in "${UPSTREAMS[@]}"; do cleanup_route "$i"; ((i++)); done
  echo "[DONE]"
}

status_all() {
  local i=1
  for _ in "${UPSTREAMS[@]}"; do
    local t="${TUN_NAME_BASE}${i}"
    if docker ps --format '{{.Names}}' | grep -qx "$t"; then
      printf "[STATUS] %-10s " "$t"
      docker run --rm --network=container:"$t" curlimages/curl:latest -4 -s --max-time 6 https://ipv4.icanhazip.com || echo -n "n/a"
    else
      echo "[STATUS] $t: not running"
    fi
    echo
    ((i++))
  done
}

watch_loop() {
  echo "[WATCH] Mỗi ${WATCH_INTERVAL}s in egress IP từng tuyến (Ctrl+C để dừng)"
  declare -A last
  while true; do
    local i=1
    for _ in "${UPSTREAMS[@]}"; do
      local t="${TUN_NAME_BASE}${i}"
      if docker ps --format '{{.Names}}' | grep -qx "$t"; then
        ipcur="$(docker run --rm --network=container:"$t" curlimages/curl:latest -4 -s --max-time 6 https://ipv4.icanhazip.com || echo "n/a")"
        if [[ "${last[$t]:-}" != "$ipcur" ]]; then
          echo "[CHANGE] ${t}: ${last[$t]:-<none>} -> ${ipcur}"
          last[$t]="$ipcur"
        else
          echo "[KEEP]   ${t}: ${ipcur}"
        fi
      else
        echo "[MISS]   ${t}: not running"
      fi
      ((i++))
    done
    sleep "$WATCH_INTERVAL"
  done
}

# ===================== CLI =====================
# ./proxy.sh           -> khởi tạo tất cả tuyến
# ./proxy.sh status    -> in IP từng tuyến
# ./proxy.sh watch     -> theo dõi IP thay đổi
# ./proxy.sh down      -> xoá toàn bộ tuyến
case "${1:-up}" in
  up)
    i=1
    for up in "${UPSTREAMS[@]}"; do start_route "$i" "$up"; ((i++)); done
    echo; echo "✅ KHỞI TẠO ${#UPSTREAMS[@]} TUYẾN. Dùng: --network=container:tunN"
    ;;
  status) status_all ;;
  watch)  watch_loop ;;
  down)   down_all ;;
  *) echo "Usage: $0 [up|status|watch|down]"; exit 1 ;;
esac
